[gd_scene load_steps=10 format=2]

[ext_resource path="res://addons/vr-common/images/teleport_arrow.png" type="Texture" id=1]
[ext_resource path="res://addons/vr-common/images/teleport_target.png" type="Texture" id=2]

[sub_resource type="GDScript" id=1]

script/source = "extends KinematicBody

# Add this scene as a sub scene of your ARVRController node to implement a teleport function on that controller.

export (NodePath) var origin = null
var origin_node = null

export var strength = 5.0
var is_teleporting = false
var can_teleport = true
var teleport_rotation = 0.0;
var is_on_floor = true
var floor_normal = Vector3(0.0, 1.0, 0.0)
var last_target_transform = Transform()
onready var ws = ARVRServer.world_scale

const height_to_radius_ratio = 4.0

func set_player_height(p_height):
	# for some reason collision shape height measurement is half up, half down from center 
	$CollisionShape.shape.height = p_height/2.0
	$CollisionShape.shape.radius = p_height/height_to_radius_ratio
	
	# also move it half way up, we give a bit of leeway because the bottom of our capsule collider leaves a bit of margin
	$CollisionShape.translation = Vector3(0.0, (p_height / 2.0) - 0.02, 0.0)

func _ready():
	# And its parent should be our origin point
	origin_node = get_node(origin)

	# It's inactive when we start
	$Teleport.visible = false
	$Target.visible = false
	
	# Scale to our world scale
	$Teleport.mesh.size = Vector2(0.05 * ws, 1.0)
	$Target.mesh.size = Vector2(ws, ws)
	
	# init our default height
	set_player_height(1.8)

# this is a re-implementation of test_move, unfortunately test_move does not return collision information which we need.
func hit_test(p_from, p_to):
	# build our transforms, this could be so much simpler if our collision shape wasn't rotated
	var from_transform = Transform(Basis(), p_from)
	var to_transform = Transform(Basis(), p_to)
	
	# apply our collision transform
	var shape_transform = $CollisionShape.transform
	from_transform *= shape_transform
	to_transform *= shape_transform
	
	# disable our shape or we collide with ourself, need to investigate how too properly use exclude
	$CollisionShape.disabled = true
	
	var space = PhysicsServer.body_get_space(self.get_rid())
	var state = PhysicsServer.space_get_direct_state(space)
	var query = PhysicsShapeQueryParameters.new()
	query.collision_mask = collision_mask
	query.margin = get_safe_margin()
	query.shape_rid = $CollisionShape.shape.get_rid()
	query.transform = from_transform

	var cast_result = state.cast_motion(query, to_transform.origin - from_transform.origin)
	if cast_result.size() == 0:
		# nothing to collide with...
		return null
	else:
		# cast_result[0] has our position just before we collide, so we return that
		var result = p_from.linear_interpolate(p_to, cast_result[0])
		
		if p_to.y > p_from.y:
			# if we're moving up, we hit the ceiling of something
			is_on_floor = false
		else:
			# now we cast a ray to see if we actually end up standing on a surface
			var up = Vector3(0.0, 1.0, 0.0)
			var intersects = state.intersect_ray(p_from, p_from.linear_interpolate(p_to, 1.1))
			if intersects.empty():
				is_on_floor = false
			else:
				floor_normal = intersects[\"normal\"]
				var dot = floor_normal.dot(up)
				if dot > 0.9:
					is_on_floor = true
				else:
					is_on_floor = false
		
		return result

func _physics_process(delta):
	# We should be the child or the controller on which the teleport is implemented
	var controller = get_parent()
	
	# check if our world scale has changed..
	var new_ws = ARVRServer.world_scale
	if ws != new_ws:
		ws = new_ws
		$Teleport.mesh.size = Vector2(0.05 * ws, 1.0)
		$Target.mesh.size = Vector2(ws, ws)
	
	# button 15 is mapped to our trigger
	if controller and controller.get_is_active() and controller.is_button_pressed(15):
		if !is_teleporting:
			is_teleporting = true
			$Teleport.visible = true
			$Target.visible = true
			teleport_rotation = 0.0
		
		# check our axis to see if we need to rotate
		teleport_rotation += (delta * controller.get_joystick_axis(0) * -4.0)
		
		# and update our transform
		var teleport_global_transform = $Teleport.global_transform
		
		# update location
		var target_global_origin = teleport_global_transform.origin
		var down = Vector3(0.0, -1.0 / ws, 0.0)
		
		############################################################
		# New teleport logic
		# We're going to use test move in steps to find out where we hit something...
		# This can be optimised loads by determining the lenght based on the angle between sections extending the length when we're in a flat part of the arch
		# Where we do get a collission we may want to fine tune the collision
		var cast_length = 0.0
		var hit_something = false
		for i in range(1,21):
			var global_target = Vector3(0.0, 0.0, -0.5 * i)
			
			# our quadratic values
			var t = global_target.z / strength
			var t2 = t * t
			
			# target to world space
			global_target = teleport_global_transform.xform(global_target)
			
			# adjust for gravity
			global_target += down * t2

			var collided_at = hit_test(target_global_origin, global_target)
			if collided_at:
				# we are colliding, find our if we're colliding on a wall or floor, one we can do, the other nope...
				
				cast_length += (collided_at - target_global_origin).length()
				target_global_origin = collided_at
				hit_something = true
				break
			else:
				# next section!
				cast_length = i * 0.5
				target_global_origin = global_target
		
		# and just update our shader
		$Teleport.get_surface_material(0).set_shader_param(\"scale_t\", 1.0 / strength)
		$Teleport.get_surface_material(0).set_shader_param(\"ws\", ws)
		$Teleport.get_surface_material(0).set_shader_param(\"length\", cast_length)
		if hit_something:
			var color = Color(0.0, 1.0, 0.0, 1.0)
			var normal = Vector3(0.0, 1.0, 0.0)
			if is_on_floor:
				# if we're on the floor we'll reorientate our target to match.
				normal = floor_normal
				can_teleport = true
			else:
				can_teleport = false
				color = Color(1.0, 0.0, 0.0, 1.0)

			# update target and colour
			var target_basis = Basis()
			target_basis.z = Vector3(teleport_global_transform.basis.z.x, 0.0, teleport_global_transform.basis.z.z).normalized()
			target_basis.y = normal
			target_basis.x = target_basis.y.cross(target_basis.z)
			target_basis.z = target_basis.x.cross(target_basis.y)
			
			target_basis = target_basis.rotated(normal, teleport_rotation)
			last_target_transform.basis = target_basis
			last_target_transform.origin = target_global_origin
			$Target.global_transform = last_target_transform

			$Teleport.get_surface_material(0).set_shader_param(\"mix_color\", color)
			$Target.get_surface_material(0).albedo_color = color
			$Target.visible = true
		else:
			can_teleport = false
			$Target.visible = false
			$Teleport.get_surface_material(0).set_shader_param(\"mix_color\", Color(45.0 / 255.0, 80.0 / 255.0, 220.0 / 255.0, 1.0))
		
		# should check if we can teleport where we are pointing and change colour accordingly..
		can_teleport = true # for now assume so
	elif is_teleporting:
		if can_teleport:
			# reset our player position to center
			ARVRServer.center_on_hmd(true, true)
			
			# make our target horizontal again
			var new_transform = last_target_transform
			new_transform.basis.y = Vector3(0.0, 1.0, 0.0)
			new_transform.basis.x = new_transform.basis.y.cross(new_transform.basis.z)
			new_transform.basis.z = new_transform.basis.x.cross(new_transform.basis.y)
			
			# and change our location
			if origin_node:
				origin_node.global_transform = new_transform
		
		# and disable
		is_teleporting = false;
		$Teleport.visible = false
		$Target.visible = false

"

[sub_resource type="PlaneMesh" id=2]

size = Vector2( 0.05, 1 )
subdivide_width = 0
subdivide_depth = 40

[sub_resource type="Shader" id=3]

code = "shader_type spatial;
render_mode unshaded, cull_disabled, skip_vertex_transform;

uniform float scale_t = 0.2;
uniform float length = 20.0;
uniform float ws = 1.0;
uniform vec4 mix_color : hint_color;
uniform sampler2D arrow_texture : hint_albedo;

void vertex() {
	vec3 down = vec3(0.0, -1.0 / ws, 0.0);
	
	// offset our Z so we're projecting from our origin point
	VERTEX.z -= 0.5;
	VERTEX.z *= length;
	
	// now use that to create our arch
	float t = VERTEX.z * scale_t;
	float t2 = t * t;

	// translate to our world vector
	VERTEX = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz; 
	
	// and now create our arch
	VERTEX += down * t2;
	
	// and apply our camera matrix
	VERTEX = (INV_CAMERA_MATRIX * vec4(VERTEX, 1.0)).xyz;
}

void fragment() {
	// and do our color
	float offset =  (TIME * 2.0);
	vec4 col = texture(arrow_texture, vec2(UV.x, (UV.y * length * -4.0) + offset )).rgba;
	ALBEDO = col.rgb * mix_color.rgb;
	
	// need to fix up our image and add an alpha channel
	ALPHA = col.a;
}
"

[sub_resource type="ShaderMaterial" id=4]

render_priority = 0
shader = SubResource( 3 )
shader_param/scale_t = 0.2
shader_param/length = 30.0
shader_param/ws = null
shader_param/mix_color = Color( 0.176471, 0.313726, 0.862745, 1 )
shader_param/arrow_texture = ExtResource( 1 )
_sections_unfolded = [ "shader_param" ]

[sub_resource type="PlaneMesh" id=5]

size = Vector2( 1, 1 )
subdivide_width = 0
subdivide_depth = 0

[sub_resource type="SpatialMaterial" id=6]

render_priority = 0
flags_transparent = true
flags_unshaded = true
flags_vertex_lighting = false
flags_no_depth_test = false
flags_use_point_size = false
flags_world_triplanar = false
flags_fixed_size = false
flags_albedo_tex_force_srgb = false
vertex_color_use_as_albedo = false
vertex_color_is_srgb = false
params_diffuse_mode = 1
params_specular_mode = 0
params_blend_mode = 0
params_cull_mode = 2
params_depth_draw_mode = 0
params_line_width = 1.0
params_point_size = 1.0
params_billboard_mode = 0
params_grow = false
params_use_alpha_scissor = false
albedo_color = Color( 0.176471, 0.313726, 0.862745, 1 )
albedo_texture = ExtResource( 2 )
metallic = 0.0
metallic_specular = 0.5
metallic_texture_channel = 0
roughness = 0.0
roughness_texture_channel = 0
emission_enabled = false
normal_enabled = false
rim_enabled = false
clearcoat_enabled = false
anisotropy_enabled = false
ao_enabled = false
depth_enabled = false
subsurf_scatter_enabled = false
transmission_enabled = false
refraction_enabled = false
detail_enabled = false
uv1_scale = Vector3( 1, 1, 1 )
uv1_offset = Vector3( 0, 0, 0 )
uv1_triplanar = false
uv1_triplanar_sharpness = 1.0
uv2_scale = Vector3( 1, 1, 1 )
uv2_offset = Vector3( 0, 0, 0 )
uv2_triplanar = false
uv2_triplanar_sharpness = 1.0
proximity_fade_enable = false
distance_fade_enable = false
_sections_unfolded = [ "Albedo", "Flags", "Parameters" ]

[sub_resource type="CapsuleShape" id=7]

radius = 0.4
height = 0.9
_sections_unfolded = [ "Resource" ]

[node name="Function_Teleport" type="KinematicBody" index="0"]

input_ray_pickable = true
input_capture_on_drag = false
collision_layer = 1
collision_mask = 1
axis_lock_linear_x = false
axis_lock_linear_y = false
axis_lock_linear_z = false
axis_lock_angular_x = false
axis_lock_angular_y = false
axis_lock_angular_z = false
collision/safe_margin = 0.001
script = SubResource( 1 )
_sections_unfolded = [ "Axis Lock", "Collision", "Transform", "collision" ]
origin = null
strength = 5.0

[node name="Teleport" type="MeshInstance" parent="." index="0"]

layers = 1
material_override = null
cast_shadow = 1
extra_cull_margin = 0.0
use_in_baked_light = false
lod_min_distance = 0.0
lod_min_hysteresis = 0.0
lod_max_distance = 0.0
lod_max_hysteresis = 0.0
mesh = SubResource( 2 )
skeleton = NodePath("..")
material/0 = SubResource( 4 )
_sections_unfolded = [ "Transform", "material" ]

[node name="Target" type="MeshInstance" parent="." index="1"]

layers = 1
material_override = null
cast_shadow = 1
extra_cull_margin = 0.0
use_in_baked_light = false
lod_min_distance = 0.0
lod_min_hysteresis = 0.0
lod_max_distance = 0.0
lod_max_hysteresis = 0.0
mesh = SubResource( 5 )
skeleton = NodePath("..")
material/0 = SubResource( 6 )
_sections_unfolded = [ "material" ]

[node name="CollisionShape" type="CollisionShape" parent="." index="2"]

transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0.9, 0 )
shape = SubResource( 7 )
disabled = false
_sections_unfolded = [ "Transform" ]


